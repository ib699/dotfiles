;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/10/2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdio.h>
;
;#define E 5
;#define RW 4
;#define RS 3
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;// USART Receiver interrupt service routine
;
;
;
;
;char string[32];
;unsigned char raw[32]={0};
;int rawcounter=0;
;void write_raw(unsigned char data[]);
;void write_data(unsigned char data);
;void screenReset();
;unsigned char read_data();
;
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0043 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0044 char status,data;
; 0000 0045 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0046 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0047 
; 0000 0048 write_data(UDR);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0049 
; 0000 004A PORTD.6=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 004B 
; 0000 004C if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 004D    {
; 0000 004E    rx_buffer[rx_wr_index++]=data;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004F #if RX_BUFFER_SIZE == 256
; 0000 0050    // special case for receiver buffer size=256
; 0000 0051    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0052 #else
; 0000 0053    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0054    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0055       {
; 0000 0056       rx_counter=0;
;PCODE: $0000002B VOL: 0
; 0000 0057       rx_buffer_overflow=1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0058       }
; 0000 0059 #endif
; 0000 005A    }
;PCODE: $0000002F VOL: 0
; 0000 005B }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0061 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0062 char data;
; 0000 0063 while (rx_counter==0);
;PCODE: $00000037 VOL: 0
;	data -> R17
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0064 data=rx_buffer[rx_rd_index++];
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0065 #if RX_BUFFER_SIZE != 256
; 0000 0066 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0067 #endif
; 0000 0068 #asm("cli")
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
	cli
;PCODE: $00000048 VOL: 0
; 0000 0069 --rx_counter;
;PCODE: $00000049 VOL: 0
; 0000 006A #asm("sei")
;PCODE: $0000004A VOL: 0
	sei
;PCODE: $0000004B VOL: 0
; 0000 006B return data;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006C }
;PCODE: $0000004F VOL: 0
;#pragma used-
;#endif
;// Declare your global variables here
;
;//WARNING: This Font is usable only with MikroE GLCD Lib.
;//         X-GLCD Lib does not handle this font.
;
;//Font Generated by MikroElektronika GLCD Font Creator 1.2.0.0
;//MikroeElektronika 2011
;//http://www.mikroe.com
;
;//GLCD FontName : Arial8x8
;//GLCD FontSize : 8 x 8
;
;const unsigned short Arial[] = {
;        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char
;        0x00, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char !
;        0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,  // Code for char "
;        0x00, 0xE4, 0x3C, 0xE7, 0x3C, 0x27, 0x00, 0x00,  // Code for char #
;        0x00, 0x46, 0x89, 0xFF, 0x89, 0x72, 0x00, 0x00,  // Code for char $
;        0x00, 0x06, 0x09, 0x89, 0x66, 0x18, 0x66, 0x91,  // Code for char %
;        0x00, 0x60, 0x96, 0x89, 0x99, 0x66, 0xA0, 0x00,  // Code for char &
;        0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char '
;        0x00, 0xFC, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,  // Code for char (
;        0x00, 0x01, 0x02, 0xFC, 0x00, 0x00, 0x00, 0x00,  // Code for char )
;        0x00, 0x0A, 0x07, 0x0A, 0x00, 0x00, 0x00, 0x00,  // Code for char *
;        0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00,  // Code for char +
;        0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ,
;        0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00,  // Code for char -
;        0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char .
;        0x00, 0xC0, 0x3C, 0x03, 0x00, 0x00, 0x00, 0x00,  // Code for char /
;        0x00, 0x7E, 0x81, 0x81, 0x81, 0x7E, 0x00, 0x00,  // Code for char 0
;        0x00, 0x04, 0x02, 0xFF, 0x00, 0x00, 0x00, 0x00,  // Code for char 1
;        0x00, 0x82, 0xC1, 0xA1, 0x91, 0x8E, 0x00, 0x00,  // Code for char 2
;        0x00, 0x42, 0x81, 0x89, 0x89, 0x76, 0x00, 0x00,  // Code for char 3
;        0x00, 0x30, 0x2C, 0x22, 0xFF, 0x20, 0x00, 0x00,  // Code for char 4
;        0x00, 0x4C, 0x8B, 0x89, 0x89, 0x71, 0x00, 0x00,  // Code for char 5
;        0x00, 0x7E, 0x89, 0x89, 0x89, 0x72, 0x00, 0x00,  // Code for char 6
;        0x00, 0x01, 0xE1, 0x19, 0x07, 0x01, 0x00, 0x00,  // Code for char 7
;        0x00, 0x76, 0x89, 0x89, 0x89, 0x76, 0x00, 0x00,  // Code for char 8
;        0x00, 0x4E, 0x91, 0x91, 0x91, 0x7E, 0x00, 0x00,  // Code for char 9
;        0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char :
;        0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ;
;        0x00, 0x10, 0x28, 0x28, 0x28, 0x44, 0x00, 0x00,  // Code for char <
;        0x00, 0x28, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00,  // Code for char =
;        0x00, 0x44, 0x28, 0x28, 0x28, 0x10, 0x00, 0x00,  // Code for char >
;        0x00, 0x02, 0x01, 0xB1, 0x09, 0x06, 0x00, 0x00,  // Code for char ?
;        0x00, 0xF8, 0x06, 0x72, 0x89, 0x85, 0x45, 0xF9,  // Code for char @
;        0x00, 0xC0, 0x30, 0x2E, 0x21, 0x2E, 0x30, 0xC0,  // Code for char A
;        0x00, 0xFF, 0x89, 0x89, 0x89, 0x89, 0x7E, 0x00,  // Code for char B
;        0x00, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x42, 0x00,  // Code for char C
;        0x00, 0xFF, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x00,  // Code for char D
;        0x00, 0xFF, 0x89, 0x89, 0x89, 0x89, 0x00, 0x00,  // Code for char E
;        0x00, 0xFF, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00,  // Code for char F
;        0x00, 0x3C, 0x42, 0x81, 0x81, 0x91, 0x52, 0x34,  // Code for char G
;        0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00,  // Code for char H
;        0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char I
;        0x00, 0x60, 0x80, 0x80, 0x7F, 0x00, 0x00, 0x00,  // Code for char J
;        0x00, 0xFF, 0x10, 0x08, 0x1C, 0x62, 0x81, 0x00,  // Code for char K
;        0x00, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00,  // Code for char L
;        0x00, 0xFF, 0x06, 0x38, 0xC0, 0x38, 0x06, 0xFF,  // Code for char M
;        0x00, 0xFF, 0x02, 0x0C, 0x30, 0x40, 0xFF, 0x00,  // Code for char N
;        0x00, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x42, 0x3C,  // Code for char O
;        0x00, 0xFF, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00,  // Code for char P
;        0x00, 0x3C, 0x42, 0x81, 0xA1, 0xA1, 0x42, 0xBC,  // Code for char Q
;        0x00, 0xFF, 0x09, 0x09, 0x19, 0x69, 0x86, 0x00,  // Code for char R
;        0x00, 0x46, 0x89, 0x89, 0x91, 0x91, 0x62, 0x00,  // Code for char S
;        0x00, 0x01, 0x01, 0xFF, 0x01, 0x01, 0x00, 0x00,  // Code for char T
;        0x00, 0x7F, 0x80, 0x80, 0x80, 0x80, 0x7F, 0x00,  // Code for char U
;        0x00, 0x03, 0x0C, 0x30, 0xC0, 0x30, 0x0C, 0x03,  // Code for char V
;        0x00, 0x3C, 0xC0, 0x30, 0x0E, 0x01, 0x0E, 0x30,  // Code for char W
;        0x00, 0x81, 0x66, 0x18, 0x18, 0x66, 0x81, 0x00,  // Code for char X
;        0x00, 0x01, 0x06, 0x08, 0xF0, 0x08, 0x06, 0x01,  // Code for char Y
;        0x00, 0x80, 0xC1, 0xB1, 0x8D, 0x83, 0x81, 0x00,  // Code for char Z
;        0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char [
;        0x00, 0x03, 0x3C, 0xC0, 0x00, 0x00, 0x00, 0x00,  // Code for char BackSlash
;        0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ]
;        0x00, 0x08, 0x06, 0x01, 0x06, 0x08, 0x00, 0x00,  // Code for char ^
;        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char _
;        0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char `
;        0x00, 0x68, 0x94, 0x94, 0x54, 0xF8, 0x00, 0x00,  // Code for char a
;        0x00, 0xFF, 0x48, 0x84, 0x84, 0x78, 0x00, 0x00,  // Code for char b
;        0x00, 0x78, 0x84, 0x84, 0x84, 0x48, 0x00, 0x00,  // Code for char c
;        0x00, 0x78, 0x84, 0x84, 0x48, 0xFF, 0x00, 0x00,  // Code for char d
;        0x00, 0x78, 0x94, 0x94, 0x94, 0x58, 0x00, 0x00,  // Code for char e
;        0x00, 0x04, 0xFE, 0x05, 0x00, 0x00, 0x00, 0x00,  // Code for char f
;        0x00, 0x78, 0x84, 0x84, 0x48, 0xFC, 0x00, 0x00,  // Code for char g
;        0x00, 0xFF, 0x08, 0x04, 0x04, 0xF8, 0x00, 0x00,  // Code for char h
;        0x00, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char i
;        0x00, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char j
;        0x00, 0xFF, 0x10, 0x68, 0x84, 0x00, 0x00, 0x00,  // Code for char k
;        0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char l
;        0x00, 0xFC, 0x08, 0x04, 0xFC, 0x04, 0x04, 0xF8,  // Code for char m
;        0x00, 0xFC, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x00,  // Code for char n
;        0x00, 0x78, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00,  // Code for char o
;        0x00, 0xFC, 0x48, 0x84, 0x84, 0x78, 0x00, 0x00,  // Code for char p
;        0x00, 0x78, 0x84, 0x84, 0x48, 0xFC, 0x00, 0x00,  // Code for char q
;        0x00, 0xFC, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,  // Code for char r
;        0x00, 0x48, 0x94, 0x94, 0xA4, 0x48, 0x00, 0x00,  // Code for char s
;        0x00, 0xFF, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char t
;        0x00, 0x7C, 0x80, 0x80, 0x40, 0xFC, 0x00, 0x00,  // Code for char u
;        0x00, 0x0C, 0x30, 0xC0, 0x30, 0x0C, 0x00, 0x00,  // Code for char v
;        0x00, 0x0C, 0x30, 0xC0, 0x38, 0x04, 0x38, 0xC0,  // Code for char w
;        0x00, 0x84, 0x48, 0x30, 0x48, 0x84, 0x00, 0x00,  // Code for char x
;        0x00, 0x0C, 0x30, 0xC0, 0x30, 0x0C, 0x00, 0x00,  // Code for char y
;        0x00, 0x84, 0xC4, 0xB4, 0x8C, 0x84, 0x00, 0x00,  // Code for char z
;        0x00, 0x10, 0xEE, 0x01, 0x00, 0x00, 0x00, 0x00,  // Code for char {
;        0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char |
;        0x00, 0x00, 0x01, 0xEE, 0x10, 0x00, 0x00, 0x00,  // Code for char }
;        0x00, 0x18, 0x08, 0x18, 0x10, 0x08, 0x00, 0x00,  // Code for char ~
;        0x00, 0xFF, 0x81, 0xFF, 0x00, 0x00, 0x00, 0x00   // Code for char 
;        };
;
;
;void write_string8Line(char str[]){
; 0000 00DF void write_string8Line(char str[]){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00E0 unsigned char temp[8];
; 0000 00E1 unsigned char data[32][8];
; 0000 00E2 int k;
; 0000 00E3 int i;
; 0000 00E4 int j;
; 0000 00E5 int counter;
; 0000 00E6 int c;
; 0000 00E7 
; 0000 00E8     int len = strlen(str);
; 0000 00E9     for(i=0; i<32; i++){
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;	str -> Y+276
;	temp -> Y+268
;	data -> Y+12
;	k -> R16,R17
;	i -> R18,R19
;	j -> R20,R21
;	counter -> Y+10
;	c -> Y+8
;	len -> Y+6
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00EA        if(i>=len)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00EB         for(j=0;j<8;j++)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00EC             data[i][j]=0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00ED }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00EE 
; 0000 00EF for(k=0; k<len; k++){
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00F0     c = str[k];
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00F1     c-=32;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00F2     c*=8;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00F3 
; 0000 00F4     for(i=0; i<8; i++){
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00F5         temp[i]=Arial[c+(7-i)];
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00F6     }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00F7 
; 0000 00F8     for(i=0; i<8; i++){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F9         for(j=0;j<8;j++){
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00FA             data[k][i] += temp[j]%2;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00FB             if(j!=7)
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00FC                 data[k][i] = data[k][i] << 1;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00FD             temp[j]/=2;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00FE         }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00FF     }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0100  }
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0101     for(i=0; i<8; i++){
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0102         for(k=0; k<32; k++){
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0103            write_data(data[k][i]);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0104         }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0105     }
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0106 }
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;void write_space(){
; 0000 0107 void write_space(){
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0108     int k;
; 0000 0109     for(k=0; k<32; k++){
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;	k -> R16,R17
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 010A         write_data(0);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 010B     }
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 010C }
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;
;void write_data(unsigned char data){
; 0000 010E void write_data(unsigned char data){
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 010F 
; 0000 0110 PORTD.E = 0;
;PCODE: $00000139 VOL: 0
;	data -> Y+0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0111 #asm("nop")
;PCODE: $0000013C VOL: 0
	nop
;PCODE: $0000013D VOL: 0
; 0000 0112 PORTA = 0x0C;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0113 PORTD = (0<<RW)|(1<<RS);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0114 PORTD.E = 1;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0115 #asm("nop")
;PCODE: $00000144 VOL: 0
	nop
;PCODE: $00000145 VOL: 0
; 0000 0116 #asm("nop")
;PCODE: $00000146 VOL: 0
	nop
;PCODE: $00000147 VOL: 0
; 0000 0117 //delay_ms(1);
; 0000 0118 PORTD.E = 0;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0119 #asm("nop")
;PCODE: $0000014A VOL: 0
	nop
;PCODE: $0000014B VOL: 0
; 0000 011A PORTA = data;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 011B PORTD = (0<<RW)|(0<<RS);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 011C PORTD.E = 1;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 011D #asm("nop")
;PCODE: $00000152 VOL: 0
	nop
;PCODE: $00000153 VOL: 0
; 0000 011E //delay_ms(1);
; 0000 011F PORTD.E = 0;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0120 #asm("nop")
;PCODE: $00000156 VOL: 0
	nop
;PCODE: $00000157 VOL: 0
; 0000 0121 
; 0000 0122 }
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;
;unsigned char read_data(){
; 0000 0124 unsigned char read_data(){
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0125     //read data (after set cursor first read is not valid second read is correct)
; 0000 0126  unsigned char data;
; 0000 0127 PORTD.E = 0;
;PCODE: $0000015D VOL: 0
;	data -> R17
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0128 PORTA = 0x0D;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0129 PORTD = (0<<RW)|(1<<RS);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 012A PORTD.E = 1;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 012B //delay_ms(1);
; 0000 012C PORTD.E = 0;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 012D DDRA = 0x00;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 012E PORTD = (1<<RW)|(0<<RS);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 012F PORTD.E = 1;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0130 //delay_ms(1);
; 0000 0131 PORTD.E = 0;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0132 data = PINA;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0133 DDRA = 0xFF;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0134 return data;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0135 }
;PCODE: $00000177 VOL: 0
;
;void set_bit(unsigned char data){
; 0000 0137 void set_bit(unsigned char data){
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0138 
; 0000 0139 PORTD.E = 0;
;PCODE: $0000017A VOL: 0
;	data -> Y+0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 013A #asm("nop")
;PCODE: $0000017D VOL: 0
	nop
;PCODE: $0000017E VOL: 0
; 0000 013B PORTA = 0x0F;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 013C PORTD = (0<<RW)|(1<<RS);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 013D PORTD.E = 1;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 013E #asm("nop")
;PCODE: $00000185 VOL: 0
	nop
;PCODE: $00000186 VOL: 0
; 0000 013F //delay_ms(1);
; 0000 0140 PORTD.E = 0;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0141 #asm("nop")
;PCODE: $00000189 VOL: 0
	nop
;PCODE: $0000018A VOL: 0
; 0000 0142 PORTA = data; //0-8
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0143 PORTD = (0<<RW)|(0<<RS);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0144 PORTD.E = 1;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0145 #asm("nop")
;PCODE: $00000191 VOL: 0
	nop
;PCODE: $00000192 VOL: 0
; 0000 0146 //delay_ms(1);
; 0000 0147 PORTD.E = 0;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0148 #asm("nop")
;PCODE: $00000195 VOL: 0
	nop
;PCODE: $00000196 VOL: 0
; 0000 0149 
; 0000 014A }
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;
;void clear_bit(unsigned char data){
; 0000 014C void clear_bit(unsigned char data){
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 014D 
; 0000 014E PORTD.E = 0;
;PCODE: $0000019C VOL: 0
;	data -> Y+0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 014F #asm("nop")
;PCODE: $0000019F VOL: 0
	nop
;PCODE: $000001A0 VOL: 0
; 0000 0150 PORTA = 0x0E;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0151 PORTD = (0<<RW)|(1<<RS);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0152 PORTD.E = 1;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0153 #asm("nop")
;PCODE: $000001A7 VOL: 0
	nop
;PCODE: $000001A8 VOL: 0
; 0000 0154 //delay_ms(1);
; 0000 0155 PORTD.E = 0;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0156 #asm("nop")
;PCODE: $000001AB VOL: 0
	nop
;PCODE: $000001AC VOL: 0
; 0000 0157 PORTA = data; //0-8
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0158 PORTD = (0<<RW)|(0<<RS);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0159 PORTD.E = 1;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 015A #asm("nop")
;PCODE: $000001B3 VOL: 0
	nop
;PCODE: $000001B4 VOL: 0
; 0000 015B //delay_ms(1);
; 0000 015C PORTD.E = 0;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 015D #asm("nop")
;PCODE: $000001B7 VOL: 0
	nop
;PCODE: $000001B8 VOL: 0
; 0000 015E 
; 0000 015F }
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;
;void cursor_setLowAddress(unsigned char data){
; 0000 0161 void cursor_setLowAddress(unsigned char data){
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0162    //cursor low address
; 0000 0163 #asm("nop")
;PCODE: $000001BE VOL: 0
;	data -> Y+0
;PCODE: $000001BF VOL: 0
	nop
;PCODE: $000001C0 VOL: 0
; 0000 0164 PORTD.E = 0;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0165 #asm("nop")
;PCODE: $000001C3 VOL: 0
	nop
;PCODE: $000001C4 VOL: 0
; 0000 0166 PORTA = 0x0A;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0167 PORTD = (0<<RW)|(1<<RS);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0168 #asm("nop")
;PCODE: $000001C9 VOL: 0
	nop
;PCODE: $000001CA VOL: 0
; 0000 0169 PORTD.E = 1;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 016A #asm("nop")
;PCODE: $000001CD VOL: 0
	nop
;PCODE: $000001CE VOL: 0
; 0000 016B //delay_ms(1);
; 0000 016C #asm("nop")
;PCODE: $000001CF VOL: 0
	nop
;PCODE: $000001D0 VOL: 0
; 0000 016D PORTD.E = 0;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 016E #asm("nop")
;PCODE: $000001D3 VOL: 0
	nop
;PCODE: $000001D4 VOL: 0
; 0000 016F PORTA = data;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0170 PORTD = (0<<RW)|(0<<RS);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0171 #asm("nop")
;PCODE: $000001D9 VOL: 0
	nop
;PCODE: $000001DA VOL: 0
; 0000 0172 PORTD.E = 1;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0173 #asm("nop")
;PCODE: $000001DD VOL: 0
	nop
;PCODE: $000001DE VOL: 0
; 0000 0174 //delay_ms(1);
; 0000 0175 #asm("nop")
;PCODE: $000001DF VOL: 0
	nop
;PCODE: $000001E0 VOL: 0
; 0000 0176 PORTD.E = 0;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0177 #asm("nop")
;PCODE: $000001E3 VOL: 0
	nop
;PCODE: $000001E4 VOL: 0
; 0000 0178 
; 0000 0179 }
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;void cursor_setHighAddress(unsigned char data){
; 0000 017A void cursor_setHighAddress(unsigned char data){
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 017B        //cursor high address
; 0000 017C #asm("nop")
;PCODE: $000001EA VOL: 0
;	data -> Y+0
;PCODE: $000001EB VOL: 0
	nop
;PCODE: $000001EC VOL: 0
; 0000 017D PORTD.E = 0;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 017E #asm("nop")
;PCODE: $000001EF VOL: 0
	nop
;PCODE: $000001F0 VOL: 0
; 0000 017F PORTA = 0x0B;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0180 PORTD = (0<<RW)|(1<<RS);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0181 #asm("nop")
;PCODE: $000001F5 VOL: 0
	nop
;PCODE: $000001F6 VOL: 0
; 0000 0182 PORTD.E = 1;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0183 #asm("nop")
;PCODE: $000001F9 VOL: 0
	nop
;PCODE: $000001FA VOL: 0
; 0000 0184 //delay_ms(1);
; 0000 0185 #asm("nop")
;PCODE: $000001FB VOL: 0
	nop
;PCODE: $000001FC VOL: 0
; 0000 0186 PORTD.E = 0;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0187 #asm("nop")
;PCODE: $000001FF VOL: 0
	nop
;PCODE: $00000200 VOL: 0
; 0000 0188 PORTA = data;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0189 PORTD = (0<<RW)|(0<<RS);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 018A #asm("nop")
;PCODE: $00000205 VOL: 0
	nop
;PCODE: $00000206 VOL: 0
; 0000 018B PORTD.E = 1;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 018C #asm("nop")
;PCODE: $00000209 VOL: 0
	nop
;PCODE: $0000020A VOL: 0
; 0000 018D //delay_ms(1);
; 0000 018E #asm("nop")
;PCODE: $0000020B VOL: 0
	nop
;PCODE: $0000020C VOL: 0
; 0000 018F PORTD.E = 0;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0190 #asm("nop")
;PCODE: $0000020F VOL: 0
	nop
;PCODE: $00000210 VOL: 0
; 0000 0191 
; 0000 0192 }
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;
;void init(){
; 0000 0194 void init(){
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0195 
; 0000 0196  //goto graphic mode
; 0000 0197 PORTD.E = 0;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0198 #asm("nop")
;PCODE: $00000218 VOL: 0
	nop
;PCODE: $00000219 VOL: 0
; 0000 0199 PORTA = 0x00;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 019A PORTD = (0<<RW)|(1<<RS);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 019B #asm("nop")
;PCODE: $0000021E VOL: 0
	nop
;PCODE: $0000021F VOL: 0
; 0000 019C PORTD.E = 1;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 019D #asm("nop")
;PCODE: $00000222 VOL: 0
	nop
;PCODE: $00000223 VOL: 0
; 0000 019E //delay_ms(1);
; 0000 019F #asm("nop")
;PCODE: $00000224 VOL: 0
	nop
;PCODE: $00000225 VOL: 0
; 0000 01A0 PORTD.E = 0;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 01A1 #asm("nop")
;PCODE: $00000228 VOL: 0
	nop
;PCODE: $00000229 VOL: 0
; 0000 01A2 PORTA = 0b00110010;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 01A3 PORTD = (0<<RW)|(0<<RS);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 01A4 #asm("nop")
;PCODE: $0000022E VOL: 0
	nop
;PCODE: $0000022F VOL: 0
; 0000 01A5 PORTD.E = 1;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 01A6 #asm("nop")
;PCODE: $00000232 VOL: 0
	nop
;PCODE: $00000233 VOL: 0
; 0000 01A7 //delay_ms(1);
; 0000 01A8 #asm("nop")
;PCODE: $00000234 VOL: 0
	nop
;PCODE: $00000235 VOL: 0
; 0000 01A9 PORTD.E = 0;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 01AA #asm("nop")
;PCODE: $00000238 VOL: 0
	nop
;PCODE: $00000239 VOL: 0
; 0000 01AB 
; 0000 01AC //bit of byte
; 0000 01AD #asm("nop")
;PCODE: $0000023A VOL: 0
	nop
;PCODE: $0000023B VOL: 0
; 0000 01AE PORTD.E = 0;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 01AF #asm("nop")
;PCODE: $0000023E VOL: 0
	nop
;PCODE: $0000023F VOL: 0
; 0000 01B0 PORTA = 0x01;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 01B1 PORTD = (0<<RW)|(1<<RS);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 01B2 #asm("nop")
;PCODE: $00000244 VOL: 0
	nop
;PCODE: $00000245 VOL: 0
; 0000 01B3 PORTD.E = 1;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 01B4 #asm("nop")
;PCODE: $00000248 VOL: 0
	nop
;PCODE: $00000249 VOL: 0
; 0000 01B5 //delay_ms(1);
; 0000 01B6 #asm("nop")
;PCODE: $0000024A VOL: 0
	nop
;PCODE: $0000024B VOL: 0
; 0000 01B7 PORTD.E = 0;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 01B8 #asm("nop")
;PCODE: $0000024E VOL: 0
	nop
;PCODE: $0000024F VOL: 0
; 0000 01B9 PORTA = 0x07;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 01BA PORTD = (0<<RW)|(0<<RS);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 01BB #asm("nop")
;PCODE: $00000254 VOL: 0
	nop
;PCODE: $00000255 VOL: 0
; 0000 01BC PORTD.E = 1;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 01BD #asm("nop")
;PCODE: $00000258 VOL: 0
	nop
;PCODE: $00000259 VOL: 0
; 0000 01BE //delay_ms(1);
; 0000 01BF #asm("nop")
;PCODE: $0000025A VOL: 0
	nop
;PCODE: $0000025B VOL: 0
; 0000 01C0 PORTD.E = 0;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 01C1 #asm("nop")
;PCODE: $0000025E VOL: 0
	nop
;PCODE: $0000025F VOL: 0
; 0000 01C2 
; 0000 01C3 //byte in horizontal
; 0000 01C4 #asm("nop")
;PCODE: $00000260 VOL: 0
	nop
;PCODE: $00000261 VOL: 0
; 0000 01C5 PORTD.E = 0;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 01C6 #asm("nop")
;PCODE: $00000264 VOL: 0
	nop
;PCODE: $00000265 VOL: 0
; 0000 01C7 PORTA = 0x02;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 01C8 PORTD = (0<<RW)|(1<<RS);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 01C9 #asm("nop")
;PCODE: $0000026A VOL: 0
	nop
;PCODE: $0000026B VOL: 0
; 0000 01CA PORTD.E = 1;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 01CB #asm("nop")
;PCODE: $0000026E VOL: 0
	nop
;PCODE: $0000026F VOL: 0
; 0000 01CC //delay_ms(1);
; 0000 01CD #asm("nop")
;PCODE: $00000270 VOL: 0
	nop
;PCODE: $00000271 VOL: 0
; 0000 01CE PORTD.E = 0;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 01CF #asm("nop")
;PCODE: $00000274 VOL: 0
	nop
;PCODE: $00000275 VOL: 0
; 0000 01D0 PORTA = 31;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 01D1 PORTD = (0<<RW)|(0<<RS);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 01D2 #asm("nop")
;PCODE: $0000027A VOL: 0
	nop
;PCODE: $0000027B VOL: 0
; 0000 01D3 PORTD.E = 1;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 01D4 #asm("nop")
;PCODE: $0000027E VOL: 0
	nop
;PCODE: $0000027F VOL: 0
; 0000 01D5 //delay_ms(1);
; 0000 01D6 #asm("nop")
;PCODE: $00000280 VOL: 0
	nop
;PCODE: $00000281 VOL: 0
; 0000 01D7 PORTD.E = 0;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 01D8 #asm("nop")
;PCODE: $00000284 VOL: 0
	nop
;PCODE: $00000285 VOL: 0
; 0000 01D9 
; 0000 01DA //display time divition(1/rate)  => rows
; 0000 01DB #asm("nop")
;PCODE: $00000286 VOL: 0
	nop
;PCODE: $00000287 VOL: 0
; 0000 01DC PORTD.E = 0;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01DD #asm("nop")
;PCODE: $0000028A VOL: 0
	nop
;PCODE: $0000028B VOL: 0
; 0000 01DE PORTA = 0x03;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 01DF PORTD = (0<<RW)|(1<<RS);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 01E0 #asm("nop")
;PCODE: $00000290 VOL: 0
	nop
;PCODE: $00000291 VOL: 0
; 0000 01E1 PORTD.E = 1;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01E2 #asm("nop")
;PCODE: $00000294 VOL: 0
	nop
;PCODE: $00000295 VOL: 0
; 0000 01E3 //delay_ms(1);
; 0000 01E4 #asm("nop")
;PCODE: $00000296 VOL: 0
	nop
;PCODE: $00000297 VOL: 0
; 0000 01E5 PORTD.E = 0;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 01E6 #asm("nop")
;PCODE: $0000029A VOL: 0
	nop
;PCODE: $0000029B VOL: 0
; 0000 01E7 PORTA = 0b01000000;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 01E8 PORTD = (0<<RW)|(0<<RS);
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 01E9 #asm("nop")
;PCODE: $000002A0 VOL: 0
	nop
;PCODE: $000002A1 VOL: 0
; 0000 01EA PORTD.E = 1;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 01EB #asm("nop")
;PCODE: $000002A4 VOL: 0
	nop
;PCODE: $000002A5 VOL: 0
; 0000 01EC //delay_ms(1);
; 0000 01ED #asm("nop")
;PCODE: $000002A6 VOL: 0
	nop
;PCODE: $000002A7 VOL: 0
; 0000 01EE PORTD.E = 0;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01EF #asm("nop")
;PCODE: $000002AA VOL: 0
	nop
;PCODE: $000002AB VOL: 0
; 0000 01F0 
; 0000 01F1 //display start low order address
; 0000 01F2 #asm("nop")
;PCODE: $000002AC VOL: 0
	nop
;PCODE: $000002AD VOL: 0
; 0000 01F3 PORTD.E = 0;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 01F4 #asm("nop")
;PCODE: $000002B0 VOL: 0
	nop
;PCODE: $000002B1 VOL: 0
; 0000 01F5 PORTA = 0x08;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01F6 PORTD = (0<<RW)|(1<<RS);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 01F7 #asm("nop")
;PCODE: $000002B6 VOL: 0
	nop
;PCODE: $000002B7 VOL: 0
; 0000 01F8 PORTD.E = 1;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01F9 #asm("nop")
;PCODE: $000002BA VOL: 0
	nop
;PCODE: $000002BB VOL: 0
; 0000 01FA //delay_ms(1);
; 0000 01FB #asm("nop")
;PCODE: $000002BC VOL: 0
	nop
;PCODE: $000002BD VOL: 0
; 0000 01FC PORTD.E = 0;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 01FD #asm("nop")
;PCODE: $000002C0 VOL: 0
	nop
;PCODE: $000002C1 VOL: 0
; 0000 01FE PORTA = 0b00000000;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 01FF PORTD = (0<<RW)|(0<<RS);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0200 #asm("nop")
;PCODE: $000002C6 VOL: 0
	nop
;PCODE: $000002C7 VOL: 0
; 0000 0201 PORTD.E = 1;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0202 #asm("nop")
;PCODE: $000002CA VOL: 0
	nop
;PCODE: $000002CB VOL: 0
; 0000 0203 //delay_ms(1);
; 0000 0204 #asm("nop")
;PCODE: $000002CC VOL: 0
	nop
;PCODE: $000002CD VOL: 0
; 0000 0205 PORTD.E = 0;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0206 #asm("nop")
;PCODE: $000002D0 VOL: 0
	nop
;PCODE: $000002D1 VOL: 0
; 0000 0207 
; 0000 0208 //display start high order address
; 0000 0209 #asm("nop")
;PCODE: $000002D2 VOL: 0
	nop
;PCODE: $000002D3 VOL: 0
; 0000 020A PORTD.E = 0;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 020B #asm("nop")
;PCODE: $000002D6 VOL: 0
	nop
;PCODE: $000002D7 VOL: 0
; 0000 020C PORTA = 0x09;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 020D PORTD = (0<<RW)|(1<<RS);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 020E #asm("nop")
;PCODE: $000002DC VOL: 0
	nop
;PCODE: $000002DD VOL: 0
; 0000 020F PORTD.E = 1;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0210 #asm("nop")
;PCODE: $000002E0 VOL: 0
	nop
;PCODE: $000002E1 VOL: 0
; 0000 0211 //delay_ms(1);
; 0000 0212 #asm("nop")
;PCODE: $000002E2 VOL: 0
	nop
;PCODE: $000002E3 VOL: 0
; 0000 0213 PORTD.E = 0;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0214 #asm("nop")
;PCODE: $000002E6 VOL: 0
	nop
;PCODE: $000002E7 VOL: 0
; 0000 0215 PORTA = 0b00000000;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0216 PORTD = (0<<RW)|(0<<RS);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0217 #asm("nop")
;PCODE: $000002EC VOL: 0
	nop
;PCODE: $000002ED VOL: 0
; 0000 0218 PORTD.E = 1;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0219 #asm("nop")
;PCODE: $000002F0 VOL: 0
	nop
;PCODE: $000002F1 VOL: 0
; 0000 021A //delay_ms(1);
; 0000 021B #asm("nop")
;PCODE: $000002F2 VOL: 0
	nop
;PCODE: $000002F3 VOL: 0
; 0000 021C PORTD.E = 0;
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 021D #asm("nop")
;PCODE: $000002F6 VOL: 0
	nop
;PCODE: $000002F7 VOL: 0
; 0000 021E 
; 0000 021F cursor_setLowAddress(0);
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 0220 cursor_setHighAddress(0);
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 0221 
; 0000 0222 }
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;
;void moreSettings(){
; 0000 0224 void moreSettings(){
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0225 //write data, cursor increases automatically
; 0000 0226 //write_data(0b10101010);
; 0000 0227 
; 0000 0228  //read data (after set cursor first read is not valid second read is correct)
; 0000 0229 /*
; 0000 022A PORTD.E = 0;
; 0000 022B PORTA = 0x0D;
; 0000 022C PORTD = (0<<RW)|(1<<RS);
; 0000 022D PORTD.E = 1;
; 0000 022E //delay_ms(1);
; 0000 022F PORTD.E = 0;
; 0000 0230 DDRA = 0x00;
; 0000 0231 PORTD = (1<<RW)|(0<<RS);
; 0000 0232 PORTD.E = 1;
; 0000 0233 //delay_ms(1);
; 0000 0234 PORTD.E = 0;
; 0000 0235 unsigned char data = PINA
; 0000 0236 DDRA = 0xFF;
; 0000 0237 */
; 0000 0238 
; 0000 0239 //clear a bit, cursor increases automatically
; 0000 023A /*
; 0000 023B PORTD.E = 0;
; 0000 023C PORTA = 0x0E;
; 0000 023D PORTD = (0<<RW)|(1<<RS);
; 0000 023E PORTD.E = 1;
; 0000 023F //delay_ms(1);
; 0000 0240 PORTD.E = 0;
; 0000 0241 PORTA = 0b00000001; //0-8
; 0000 0242 PORTD = (0<<RW)|(0<<RS);
; 0000 0243 PORTD.E = 1;
; 0000 0244 //delay_ms(1);
; 0000 0245 PORTD.E = 0;
; 0000 0246 */
; 0000 0247 
; 0000 0248 //set a bit, cursor increases automatically
; 0000 0249 /*
; 0000 024A PORTD.E = 0;
; 0000 024B PORTA = 0x0F;
; 0000 024C PORTD = (0<<RW)|(1<<RS);
; 0000 024D PORTD.E = 1;
; 0000 024E //delay_ms(1);
; 0000 024F PORTD.E = 0;
; 0000 0250 PORTA = 0b00000001; //0-8
; 0000 0251 PORTD = (0<<RW)|(0<<RS);
; 0000 0252 PORTD.E = 1;
; 0000 0253 //delay_ms(1);
; 0000 0254 PORTD.E = 0;
; 0000 0255 */
; 0000 0256 
; 0000 0257 //read busy flag, just when write instruction(RS=1) check it
; 0000 0258 /*
; 0000 0259 PORTD.E = 0;
; 0000 025A DDRA = 0x00;
; 0000 025B PORTD = (1<<RW)|(1<<RS);
; 0000 025C PORTD.E = 1;
; 0000 025D //delay_ms(1);
; 0000 025E PORTD.E = 0;
; 0000 025F unsigned char b = PINA;// just PINA.7 is busy flag
; 0000 0260 DDRA = 0xFF;
; 0000 0261 */
; 0000 0262 }
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;
;void screenReset(){
; 0000 0264 void screenReset(){
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0265 int counter=0;
; 0000 0266     while(counter < 2048){
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;	counter -> R16,R17
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 0267       write_data(0);
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0268       counter++;
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 0269     }
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 026A }
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;
;void main(void)
; 0000 026D {
;PCODE: $00000315 VOL: 0
; 0000 026E // Declare your local variables here
; 0000 026F 
; 0000 0270 DDRD = 0xFF;
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 0271 DDRA = 0xFF;
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 0272 
; 0000 0273 // USART initialization
; 0000 0274 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0275 // USART Receiver: On
; 0000 0276 // USART Transmitter: Off
; 0000 0277 // USART Mode: Asynchronous
; 0000 0278 // USART Baud Rate: 9600 (Double Speed Mode)
; 0000 0279 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (1<<U2X) | (0<<MPCM);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 027A UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 027B UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 027C UBRRH=0x00;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 027D UBRRL=0x0C;
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 027E 
; 0000 027F // Global enable interrupts
; 0000 0280 #asm("sei")
;PCODE: $00000324 VOL: 0
	sei
;PCODE: $00000325 VOL: 0
; 0000 0281 
; 0000 0282 //delay_ms(1000);
; 0000 0283 init();
;PCODE: $00000326 VOL: 0
; 0000 0284 
; 0000 0285 screenReset();
;PCODE: $00000327 VOL: 0
; 0000 0286 strcpy(string, "this is a test");
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 0287 write_string8Line(string);
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 0288 
; 0000 0289 while (1)
;PCODE: $0000032F VOL: 0
; 0000 028A       {
; 0000 028B 
; 0000 028C       }
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 028D }
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0

	.DSEG
_0xA4:
	.BYTE 0xF
